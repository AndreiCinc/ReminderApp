Index: .idea/libraries/Maven__org_springframework_security_spring_security_core_5_3_3_RELEASE.xml
===================================================================
--- .idea/libraries/Maven__org_springframework_security_spring_security_core_5_3_3_RELEASE.xml	(revision 1b101c9a773021ab5cc6d02e5a7b251ce7a34bc1)
+++ .idea/libraries/Maven__org_springframework_security_spring_security_core_5_3_3_RELEASE.xml	(revision 1b101c9a773021ab5cc6d02e5a7b251ce7a34bc1)
@@ -1,13 +0,0 @@
-<component name="libraryTable">
-  <library name="Maven: org.springframework.security:spring-security-core:5.3.3.RELEASE">
-    <CLASSES>
-      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/security/spring-security-core/5.3.3.RELEASE/spring-security-core-5.3.3.RELEASE.jar!/" />
-    </CLASSES>
-    <JAVADOC>
-      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/security/spring-security-core/5.3.3.RELEASE/spring-security-core-5.3.3.RELEASE-javadoc.jar!/" />
-    </JAVADOC>
-    <SOURCES>
-      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/security/spring-security-core/5.3.3.RELEASE/spring-security-core-5.3.3.RELEASE-sources.jar!/" />
-    </SOURCES>
-  </library>
-</component>
\ No newline at end of file
Index: src/main/java/event/ReminderApp/dao/UserFakeAccess.java
===================================================================
--- src/main/java/event/ReminderApp/dao/UserFakeAccess.java	(revision 1b101c9a773021ab5cc6d02e5a7b251ce7a34bc1)
+++ src/main/java/event/ReminderApp/dao/UserFakeAccess.java	(revision 1b101c9a773021ab5cc6d02e5a7b251ce7a34bc1)
@@ -1,73 +0,0 @@
-/*
-package event.ReminderApp.dao;
-
-import event.ReminderApp.model.User;
-import org.springframework.stereotype.Repository;
-
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Optional;
-import java.util.UUID;
-
-@Repository("FakePerson")
-public class UserFakeAccess implements UserInterface {
-
-    private static List<User> users = new ArrayList<>();
-
-    @Override
-    public int insertPerson(User user, UUID id) {
-        users.add(new User(
-                id,
-                user.getUserName(),
-                user.getUserEmail(),
-                user.getUserPassword(),
-                user.getUserObservations(),
-                user.getUserRole()
-        ));
-        return 0;
-    }
-
-    @Override
-    public Optional<User> getPersonByEmail(String email) {
-        return users.stream().filter(person -> person.getUserEmail().equals(email))
-                .findFirst();
-    }
-
-    @Override
-    public Optional<User> getPersonById(UUID id) {
-       return users.stream().filter(person -> person.getUserId().equals(id))
-                .findFirst();
-    }
-
-    @Override
-    public List<User> getAllPersons() {
-        return users;
-    }
-
-
-    @Override
-    public int updatePerson(User user, UUID id) {
-       getPersonById(id).map(p -> {
-           if (p.getUserId().equals(id)) {
-               users.set(users.indexOf(p),
-                       new User(
-                               id,
-                               user.getUserName(),
-                               user.getUserEmail(),
-                               user.getUserPassword(),
-                               user.getUserObservations(),
-                               user.getUserRole()
-                       ));
-           }
-           return 0;
-       });
-       return 0;
-    }
-
-    @Override
-    public int deletePerson(UUID id) {
-        users.removeIf(p -> p.getUserId().equals(id));
-    return 0;
-    }
-}
-*/
